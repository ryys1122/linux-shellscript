#!/bin/sh

# Name: pestat
# Torque resource manager utility script: Print a 1-line summary of jobs on each node.
# Colors may be used in the output (also controlled by the PESTAT_COLOR environment variable).
# The printout at the end may be customized if needed.

# Author: Ole.H.Nielsen@fysik.dtu.dk
# URL: ftp://ftp.fysik.dtu.dk/pub/Torque/pestat
VERSION="pestat version 2.7.  Date: 31 March 2011"

# Command usage:
function usage()
{
cat <<EOF
Usage: $0 [-f] [-c|-n] [-d] [-V] [-u username|-g groupname] 
where:
	-f: Listing only nodes that are flagged by \*
	-d: Listing also nodes that are down
	-c/-n: Color/no color output
	-u username: Print only this user (do not use with -g flag)
	-g groupname: Print only users in group groupname
	-V: Version information
EOF
}

# Locations of commands used
PBSNODES=/usr/local/bin/pbsnodes
QSTAT=/usr/local/bin/qstat
AWK=/bin/awk

#
# Default parameter values
#
# Omit down nodes from the flagged list because we do not wish to see them
# (Use "pbsnodes -l" to list down nodes).
listdownnodes=0

# Colored output by default
colors=1

# Check user environment variable PESTAT_COLOR for color
if test "$PESTAT_COLOR" = "0"
then
	colors=0
fi

# Check if output is NOT a terminal: Turn colors off (can be overruled by "-c" flag).
FD=1	# File Descriptor no. 1 = stdout
if test ! -t $FD
then
	colors=0
fi

#
# Process command arguments
#
listflagged=0
while getopts "fdcnVu:g:" options; do
	case $options in
		f ) 	listflagged=1
			echo Listing only nodes that are flagged by \*
			;;
		d ) 	listdownnodes=1
			# Listing also down nodes
			;;
		c ) 	colors=1
			# Force the use of colors in output
			;;
		n ) 	colors=0
			# Do not use colors in output
			;;
		u ) 	username=$OPTARG
			echo Select only user $username
			;;
		g ) 	groupname=$OPTARG
			echo Select only users in group $groupname
			;;
		V ) echo $VERSION
			exit 0;;
		? ) usage
			exit 1;;
		* ) usage
			exit 1;;
	esac
done

# Test for extraneous command line arguments
if test $# -gt $(($OPTIND-1))
then
	echo ERROR: Too many command line arguments: $*
	usage
	exit 1
fi

if test -n "$username" -a -n "$groupname"
then
	echo ERROR: Do not select both username and groupname
	usage
	exit 1
fi

#
# Heading for printout showing:
#
# node:		Node hostname
# state:	Torque state
# load:		CPU load average
# pmem:		Physical memory
# ncpu:		Number of CPUs
# mem:		Physical+virtual memory
# resi:		Resident (used) memory
# usrs:		Number of sessions / Number of users
# jobs:		Number of jobs
# jobids/users:	Jobids and corresponding usernames of Torque jobs on this node

#
# Show the Torque node status and parse the results
#
$PBSNODES -a | $AWK -v listflagged=$listflagged -v listdownnodes=$listdownnodes -v colors=$colors -v username=$username -v groupname=$groupname -v QSTAT=$QSTAT '
BEGIN {
	# Define terminal colors for the output if requested
	if (colors != 0) {
		# See http://en.wikipedia.org/wiki/ANSI_escape_code#Colors
		RED="\033[1;31m"
		GREEN="\033[1;32m"
		NORMAL="\033[0m"
	}

	# Get the list of jobids versus usernames from qstat
	QSTAT = QSTAT " -r"			# Append -r flag (running jobs) to qstat.
	while ((QSTAT | getline) > 0) {		# Parse lines from qstat -r
		if (++line>5) {			# Skip first 5 header lines
			split($1,b,".")		# Jobid is b[1]
			jobuser[b[1]] = $2	# Username of this jobid
		}
	}
	close(QSTAT)

	if (username != "") {
		userselect=1			# We select only this username
		userfound=0
		# Get the list of user full names from passwd lines
		while ("getent passwd" | getline ) {
			split($0,b,":")         # Split password line into fields
			if (username == b[1]) userfound=1
		}
		if (userfound != 1) {
			print RED "ERROR: No such username:" NORMAL, username
			exit 1
		}
	} else if (groupname != "") {
		groupselect=1			# We have to select users in this groupname
		groupfound=0
		# Get the list of group names
		while ("getent group" | getline ) {
			split($0,b,":")         # Split group line into fields
			group[b[3]] = b[1]      # Group name b[1] of this GID (b[3])
			if (groupname == b[1]) groupfound=1
		}
		if (groupfound != 1) {
			print RED "ERROR: No such groupname:" NORMAL, groupname
			exit 1
		}
		# Get the list of user full names from passwd lines
		while ("getent passwd" | getline ) {
			split($0,b,":")         # Split password line into fields
			gidname[b[1]] = group[b[4]]   # Group name of this GID (numeric group id)
		}
	}

	# Print a header line
	print "  node state  load    pmem ncpu   mem   resi usrs tasks  jobids/users"
}
#
# Parse the output of pbsnodes
#
NF==1 {	node=$1				# 1st line is nodename
	nodename[node] = node		# Node name
	getline				# Get the next input line
	numjobs[node] = 0               # Torque jobs on the node
	numtasks[node] = 0              # Number of tasks started by Torque on the node
	listnode=0			# Set to > 0 if this node gets flagged
	userusesnode=0			# If this node is used by the selected user 
	groupusesnode=0			# If this node is used by a user in the selected group 
	while (NF >= 3) {		# Read a number of non-blank lines
		if ($1 == "state") {
			if ($3 == "job-exclusive")			state[node] = "excl"
			else if ($3 == "job-exclusive,busy")		state[node] = "busy"
			else if ($3 == "busy")				state[node] = "busy"
			else if ($3 == "free")				state[node] = "free"
			else if ($3 == "offline")			state[node] = "offl"
			else if ($3 == "offline,job-exclusive")		state[node] = "offl"
			else if ($3 == "offline,job-exclusive,busy")	state[node] = "offl"
			else if ($3 == "down")				state[node] = "down"
			else if ($3 == "down,offline")			state[node] = "down"
			else if ($3 == "down,job-exclusive")		state[node] = "down"
			else if ($3 == "down,offline,job-exclusive")	state[node] = "down"
			else if ($3 == "down,offline,busy")		state[node] = "down"
			else if ($3 == "down,offline,job-exclusive,busy")	state[node] = "down"
			else if ($3 == "UNKN")				state[node] = "UNKN"
		}
		else if ($1 == "np")		np[node] = $3
		else if ($1 == "properties")	properties[node] = $3
		else if ($1 == "ntype")		ntype[node] = $3
		else if ($1 == "jobs")		numtasks[node] = NF - 2
		else if ($1 == "status") {
			# Get the node status subfields
			split (substr($0,15), a, ",")	# Remove leading "status =", split subfields separated by ","
			for (field in a) {		# Process individual status subfields
				split(a[field],b,"=")	# Split var=value fields
				if (b[1]=="arch")		arch[node]=b[2]
				else if (b[1]=="opsys")		opsys[node]=b[2]
				else if (b[1]=="sessions")	sessions[node]=b[2]
				else if (b[1]=="nsessions")	nsessions[node]=int(b[2])
				else if (b[1]=="nusers")	nusers[node]=b[2]
				else if (b[1]=="idletime")	idletime[node]=b[2]
				else if (b[1]=="totmem")	totmem[node]=b[2]
				else if (b[1]=="availmem")	availmem[node]=b[2]
				else if (b[1]=="physmem")	physmem[node]=b[2]
				else if (b[1]=="ncpus")		ncpus[node]=b[2]
				else if (b[1]=="loadave")	loadave[node]=b[2]
				else if (b[1]=="netload")	netload[node]=b[2]
				else if (b[1]=="size")		size[node]=b[2]
				else if (b[1]=="jobs") {
					# Get the list of jobids/users for this node
					if (b[2] == "? 0") b[2] = ""	# Fix for a bug in pbsnodes ?
					numjobs[node]=split(b[2],c)
					for (i=1; i <= numjobs[node]; i++) {
						split(c[i], d, ".")
						# Get jobid and username
						jobid = d[1]
						user = jobuser[jobid]
						# Case where the node pbs_mom has a (dead job) jobid unknown to pbs_server:
						if (length(user) == 0) {	# Flag non-existent username
							user="NONE*"
							usercolor=RED
							listnode++
						} else
							usercolor=NORMAL
						# Append jobid and username to the job list
						jobidlist[node] = jobidlist[node] " " usercolor jobid " " user NORMAL
						# If this node is used by the selected user
						if (userselect==1 && user == username) userusesnode=1
						# If this node is used by a user in the selected group
						if (groupselect==1 && gidname[user] == groupname) groupusesnode=1
					}
				} else if (b[1]=="rectime")	rectime[node]=b[2]
			}
		}
		getline			# Get the next input line
	}

	# Is this node used by the selected user? Otherwise skip printout.
	if (userselect==1 && userusesnode==0) next
	# Is this node used by a user in the selected group? Otherwise skip printout.
	if (groupselect==1 && groupusesnode==0) next

	# Print out values that we are interested in.  Flag unexpected values with a "*".

	# Flag nodes with status down, offline or unknown
	if (state[node] == "busy" || state[node] == "down" || state[node] == "offl" || state[node] == "UNKN") {
		stateflag="*"
		statecolor=RED
		listnode++
	} else {
		stateflag=" "
		statecolor=NORMAL
	}

	# Flag unexpected CPU load average
	loaddiff = loadave[node] - numtasks[node]
	if (loaddiff > 0.5 || loaddiff < -0.5) {
		loadflag="*"
		loadcolor=RED
		cpucolor=GREEN
		listnode++
	} else {
		loadflag=" "
		loadcolor=NORMAL
		cpucolor=NORMAL
	}

	# Resident memory
	resi = (totmem[node]-availmem[node])/1024
	if (resi > 50 && resi > physmem[node]/1024 - 50) {	# High memory usage
		resiflag="*"
		resicolor=RED
		pmemcolor=GREEN
		listnode++
	} else {
		resiflag=" "
		resicolor=NORMAL
		pmemcolor=NORMAL
	}

	# Flag unexpected number of processes or users
	if (nsessions[node] > 2*ncpus[node] + 1) {	# More than 2 sessions per job
		sessflag="*"
		sesscolor=RED
		listnode++
	} else if (nusers[node] > ncpus[node]) {	# More users than nCPUs is bad
		sessflag="*"
		sesscolor=RED
		listnode++
	} else {
		sessflag=" "
		sesscolor=NORMAL
	}

	# Flag unexpected number of jobs
	if (numjobs[node] > numtasks[node]) {		# Should be at least 1 task per job
		jobflag="*"
		jobcolor=RED
		listnode++
	} else {
		jobflag=" "
		jobcolor=NORMAL
	}

	# Listing of down nodes?
	if (listdownnodes == 0 && state[node] == "down") listnode=0

	# Print a 1-line list for this node
	if (!listflagged || listnode > 0) {
		printf ("  %s", node)
		printf ("  %s%s%1s%s", statecolor, state[node], stateflag, NORMAL)
		printf (" %s%4.2g%1s%s", loadcolor, loadave[node], loadflag, NORMAL)
		printf (" %s%6d%s", pmemcolor, physmem[node]/1024, NORMAL)
		printf (" %s%3d%s", cpucolor, ncpus[node], NORMAL)
		printf (" %6d", totmem[node]/1024)
		printf (" %s%6d%1s%s", resicolor, resi, resiflag, NORMAL)
		printf (" %s%1d/%1d%1s%s", sesscolor, nsessions[node], nusers[node], sessflag, NORMAL)
		printf (" %s%3d%1s%s", jobcolor, numtasks[node], jobflag, NORMAL)
		printf ("  %s\n", jobidlist[node])
	}
}'
