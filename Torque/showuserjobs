#!/bin/sh

# Show the current batch jobs status broken down into userids.
# Can also show per-user or per-group status.

# Author: Ole H. Nielsen, Technical University of Denmark
# E-mail: Ole.H.Nielsen@fysik.dtu.dk
# Thanks to Garrick Staples (USC) for suggesting the getent command.

SHOWQ=/usr/local/bin/showq

# Command usage:
function usage()
{
cat <<EOF
Usage: $0 [-u username | -g groupname] [-h]
where:
        -u username: Print only user <username> (do not use with the -g flag)
        -g groupname: Print only users in group <groupname>
        -h: Print this help information
EOF
}

#
# Process command arguments
#
while getopts "u:g:h" options; do
	case $options in
		u ) 	username=$OPTARG
			echo Select only user $username
			;;
		g ) 	groupname=$OPTARG
			echo Select only users in group $groupname
			;;
		h|? ) usage
			exit 1;;
		* ) usage
			exit 1;;
	esac
done

# Test for extraneous command line arguments
if test $# -gt $(($OPTIND-1))
then
	echo ERROR: Too many command line arguments: $*
	usage
	exit 1
fi

if test -n "$username" -a -n "$groupname"
then
	echo ERROR: Do not select both username and groupname
	usage
	exit 1
fi

echo Batch job status at `date`
cat <<EOF
             Running       Idle    
Username    Jobs Procs   Jobs Procs  Group     Further info
========    ==== =====   ==== =====  ========  =============================
EOF

$SHOWQ | egrep 'Running  |Idle  |Hold  ' | awk -v uname=$username -v gname=$groupname '
BEGIN {
	# First get the list of group names 
	while ("getent group" | getline ) {
		split($0,b,":")		# Split group line into fields
		groupgid[b[3]] = b[1]	# Group name b[1] of this groupid (b[3])
		groupname[b[1]] = b[1]	# Group name b[1]
	}
	# Then get the list of user full names from passwd lines
	while ("getent passwd" | getline ) {
		split($0,b,":")		# Split password line into fields
		username[b[1]] = b[1]	# Username b[1]
		fullname[b[1]] = b[5]	# Full name b[5] of this username (b[1])
		usergroup[b[1]] = groupgid[b[4]]	# Group name of this GID (numeric group id)
	}
	if (length(uname)>0) {		# Select username
		for (u in username) {
			if (u == uname) userselect=1	# User found
		}
		if (userselect != 1) {
			printf("ERROR: Username %s is not in password file\n", uname)
			errorexit = -1
		}
	}
	if (length(gname)>0) {		# Select groupname
		for (g in groupname) {
			if (g == gname) groupselect=1	# Group found
		}
		if (groupselect != 1) {
			printf("ERROR: Groupname %s is not in group file\n", gname)
			errorexit = -2
		}
	}
	if (errorexit != 0) exit errorexit	# Will jump to END section
}

{
	userid=$2
	status=$3
	nprocs=$4
	if (userselect > 0 && uname !~ username[userid]) next	# Select specified username only
	userlist[userid] = userid

	if (status == "Running" ) {
		running[userid]++
		totalrun++
		runprocs[userid] += nprocs
		totalrunprocs += nprocs
	}
	else if (status == "Idle" || status == "Hold" || status == "BatchHold") {
		idle[userid]++
		totalidle++
		idleprocs[userid] += nprocs
		totalidleprocs += nprocs
	}
} END {
	if (errorexit != 0) exit errorexit	# Error encountered
	for (u in userlist) {
		if (groupselect > 0 && gname !~ usergroup[u]) continue # Select specified groupname only
		totalusers++
		printf ("%-11s %4d %5d   %4d %5d  %-8s  %s\n",
			userlist[u], running[u], runprocs[u], idle[u], idleprocs[u],
			usergroup[u], fullname[u])
		# Accumulate group statistics
		grp = usergroup[u]
		grouplist[grp] = grp
		groupusers[grp]++
		group_running[grp] += running[u]
		group_runprocs[grp] += runprocs[u]
		group_idle[grp] += idle[u]
		group_idleprocs[grp] += idleprocs[u]
	}
	if (userselect > 0) exit	# Finished (username specified)

	for (grp in grouplist) {
		printf ("%-11s %4d %5d   %4d %5d  %-8s  running+idle=%d procs %d users\n",
			"GROUP_TOTAL", group_running[grp], group_runprocs[grp],
			group_idle[grp], group_idleprocs[grp], grp,
			group_runprocs[grp]+group_idleprocs[grp], groupusers[grp])
	}
	if (groupselect > 0) exit	# Finished (groupname specified)

	printf ("%-11s %4d %5d   %4d %5d  %-8s  running+idle=%d procs %d users\n",
		"GRAND_TOTAL", totalrun, totalrunprocs, totalidle, totalidleprocs, 
		"ALL", totalrunprocs+totalidleprocs, totalusers)
}' | sort -r -n -k 3 -k 5 

# The sort command sorts number of running procs in descending order
